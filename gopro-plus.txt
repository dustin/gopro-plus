-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | GoPro Plus Client API.
--   
--   Please see the README on GitHub at
--   <a>https://github.com/dustin/gopro-plus#readme</a>
@package gopro-plus
@version 0.6.6.1


-- | GoPro Plus authentication.
module GoPro.Plus.Auth

-- | Authenticate against the GoPro Plus service.
authenticate :: MonadIO m => String -> String -> m AuthInfo

-- | Refresh authentication credentials using a refresh token.
refreshAuth :: MonadIO m => AuthInfo -> m AuthInfo

-- | An Authentication response.
data AuthInfo
AuthInfo :: Token -> Int -> Text -> Text -> AuthInfo
[_access_token] :: AuthInfo -> Token
[_expires_in] :: AuthInfo -> Int
[_refresh_token] :: AuthInfo -> Text
[_resource_owner_id] :: AuthInfo -> Text
access_token :: Lens' AuthInfo Token
expires_in :: Lens' AuthInfo Int
refresh_token :: Lens' AuthInfo Text
resource_owner_id :: Lens' AuthInfo Text

-- | A Monad may have a <a>HasGoProAuth</a> instance to indicate it knows
--   how to authenticate against the GoPro Plus service.
class Monad m => HasGoProAuth m

-- | Get the GoPro <a>AuthInfo</a> to use.
goproAuth :: HasGoProAuth m => m AuthInfo

-- | Convenient function for passing around auth info. You probably don't
--   want to uset his, but it can be convenient when experimenting.
withAuth :: AuthInfo -> AuthReader m a -> m a

-- | AuthReader is a convenience type that's useful for doing small
--   experiments where you don't already have your own Reader or similar.
--   e.g., in ghci you might type:
--   
--   <pre>
--   (m :: Medium) &lt;- withAuth (AuthInfo accessToken 0 "" "") $ medium mediumID
--   </pre>
type AuthReader = ReaderT AuthInfo
type Token = Text
instance GHC.Base.Monad m => GoPro.Plus.Auth.HasGoProAuth (GoPro.Plus.Auth.AuthReader m)
instance GHC.Show.Show GoPro.Plus.Auth.AuthInfo
instance GHC.Generics.Generic GoPro.Plus.Auth.AuthInfo
instance Data.Aeson.Types.FromJSON.FromJSON GoPro.Plus.Auth.AuthInfo


-- | GoPro Plus media client.
module GoPro.Plus.Media

-- | List a page worth of media.
list :: (HasGoProAuth m, MonadIO m) => Int -> Int -> m ([Medium], PageInfo)

-- | List all media.
listAll :: (HasGoProAuth m, MonadIO m) => m [Medium]

-- | List all media while returned batches pass the given predicate.
listWhile :: (HasGoProAuth m, MonadIO m) => ([Medium] -> Bool) -> m [Medium]

-- | Get the current <a>Medium</a> record for the given Medium ID.
medium :: (HasGoProAuth m, FromJSON j, MonadIO m) => MediumID -> m j

-- | Get a list of items whose processing is failed or incomplete.
--   
--   This includes items that are currently uploading, or items that will
--   not upload.
notReady :: (HasGoProAuth m, MonadIO m) => m [Medium]

-- | Get download descriptors for a given medium. The format is typically
--   <a>FileInfo</a>, but it can be useful to map it into something else.
retrieve :: (HasGoProAuth m, FromJSON j, MonadIO m) => MediumID -> m j

-- | Delete an item.
delete :: (HasGoProAuth m, MonadIO m) => MediumID -> m [Error]

-- | Reprocess a failed upload for the given medium ID
reprocess :: (HasGoProAuth m, MonadIO m) => MediumID -> m ()

-- | Fetch a 450px wide thumbnail data for the given medium.
fetchThumbnail :: (HasGoProAuth m, MonadIO m) => Medium -> m ByteString

-- | Pagination info returned from lists.
data PageInfo
PageInfo :: Int -> Int -> Int -> Int -> PageInfo
[_current_page] :: PageInfo -> Int
[_per_page] :: PageInfo -> Int
[_total_items] :: PageInfo -> Int
[_total_pages] :: PageInfo -> Int
current_page :: Lens' PageInfo Int
per_page :: Lens' PageInfo Int
total_items :: Lens' PageInfo Int
total_pages :: Lens' PageInfo Int

-- | GoPro-assigned identifier for an uploaded item.
type MediumID = Text

-- | Type of Media for a given item.
data MediumType

-- | a still photo
Photo :: MediumType

-- | normal video
Video :: MediumType

-- | a timelapse series of photos
TimeLapse :: MediumType

-- | a timelapse video
TimeLapseVideo :: MediumType

-- | a set of photos taken in a burst
Burst :: MediumType
Chaptered :: MediumType
Livestream :: MediumType
Looped :: MediumType
LoopedVideo :: MediumType
BurstVideo :: MediumType
Continuous :: MediumType
ExternalVideo :: MediumType
Session :: MediumType
MultiClipEdit :: MediumType
data ReadyToViewType
ViewReady :: ReadyToViewType
ViewFailure :: ReadyToViewType
ViewLoading :: ReadyToViewType
ViewRegistered :: ReadyToViewType
ViewTranscoding :: ReadyToViewType
ViewProcessing :: ReadyToViewType
ViewUploading :: ReadyToViewType
ViewPreTranscoding :: ReadyToViewType
ViewUpdating :: ReadyToViewType
data Medium
Medium :: MediumID -> Maybe String -> UTCTime -> UTCTime -> Maybe Int -> Int -> ReadyToViewType -> Maybe String -> MediumType -> String -> Maybe Int -> Maybe Int -> Maybe String -> Medium
[_medium_id] :: Medium -> MediumID
[_medium_camera_model] :: Medium -> Maybe String
[_medium_captured_at] :: Medium -> UTCTime
[_medium_created_at] :: Medium -> UTCTime
[_medium_file_size] :: Medium -> Maybe Int
[_medium_moments_count] :: Medium -> Int
[_medium_ready_to_view] :: Medium -> ReadyToViewType
[_medium_source_duration] :: Medium -> Maybe String
[_medium_type] :: Medium -> MediumType
[_medium_token] :: Medium -> String
[_medium_width] :: Medium -> Maybe Int
[_medium_height] :: Medium -> Maybe Int
[_medium_filename] :: Medium -> Maybe String
medium_id :: Lens' Medium MediumID
medium_camera_model :: Lens' Medium (Maybe String)
medium_captured_at :: Lens' Medium UTCTime
medium_created_at :: Lens' Medium UTCTime
medium_file_size :: Lens' Medium (Maybe Int)
medium_moments_count :: Lens' Medium Int
medium_ready_to_view :: Lens' Medium ReadyToViewType
medium_source_duration :: Lens' Medium (Maybe String)
medium_type :: Lens' Medium MediumType
medium_token :: Lens' Medium String
medium_width :: Lens' Medium (Maybe Int)
medium_height :: Lens' Medium (Maybe Int)
medium_filename :: Lens' Medium (Maybe String)
data Listing
Listing :: [Medium] -> PageInfo -> Listing
[_media] :: Listing -> [Medium]
[_pages] :: Listing -> PageInfo
media :: Lens' Listing [Medium]
pages :: Lens' Listing PageInfo
class HasMediaURL c
media_url :: HasMediaURL c => Lens' c String
class HasMediaHead c
media_head :: HasMediaHead c => Lens' c String
class HasMediaLabel c
media_label :: HasMediaLabel c => Lens' c String
class HasMediaType c
media_type :: HasMediaType c => Lens' c String
class HasMediaItemNumber c
media_item_number :: HasMediaItemNumber c => Lens' c (Maybe Int)
data File
File :: String -> Int -> Int -> Int -> Int -> Maybe [String] -> String -> String -> File
[_file_camera_position] :: File -> String
[_file_height] :: File -> Int
[_file_width] :: File -> Int
[_file_item_number] :: File -> Int
[_file_orientation] :: File -> Int
[_file_transforms] :: File -> Maybe [String]
[_file_head] :: File -> String
[_file_url] :: File -> String
file_camera_position :: Lens' File String
file_height :: Lens' File Int
file_width :: Lens' File Int
file_item_number :: Lens' File Int
file_orientation :: Lens' File Int
file_head :: Lens' File String
file_url :: Lens' File String
file_transforms :: Lens' File (Maybe [String])
data Variation
Variation :: Int -> Int -> String -> String -> Maybe [String] -> Maybe Int -> String -> String -> String -> Variation
[_var_height] :: Variation -> Int
[_var_width] :: Variation -> Int
[_var_label] :: Variation -> String
[_var_quality] :: Variation -> String
[_var_transforms] :: Variation -> Maybe [String]
[_var_item_number] :: Variation -> Maybe Int
[_var_type] :: Variation -> String
[_var_head] :: Variation -> String
[_var_url] :: Variation -> String
var_height :: Lens' Variation Int
var_width :: Lens' Variation Int
var_label :: Lens' Variation String
var_quality :: Lens' Variation String
var_type :: Lens' Variation String
var_transforms :: Lens' Variation (Maybe [String])
var_head :: Lens' Variation String
var_url :: Lens' Variation String
var_item_number :: Lens' Variation (Maybe Int)
data SpriteFrame
SpriteFrame :: Int -> Int -> Int -> SpriteFrame
[_frame_count] :: SpriteFrame -> Int
[_frame_height] :: SpriteFrame -> Int
[_frame_width] :: SpriteFrame -> Int
frame_count :: Lens' SpriteFrame Int
frame_height :: Lens' SpriteFrame Int
frame_width :: Lens' SpriteFrame Int
data Sprite
Sprite :: Double -> SpriteFrame -> Int -> Int -> String -> [String] -> [String] -> Sprite
[_sprite_fps] :: Sprite -> Double
[_sprite_frame] :: Sprite -> SpriteFrame
[_sprite_height] :: Sprite -> Int
[_sprite_width] :: Sprite -> Int
[_sprite_type] :: Sprite -> String
[_sprite_heads] :: Sprite -> [String]
[_sprite_urls] :: Sprite -> [String]
sprite_fps :: Lens' Sprite Double
sprite_frame :: Lens' Sprite SpriteFrame
sprite_height :: Lens' Sprite Int
sprite_width :: Lens' Sprite Int
sprite_type :: Lens' Sprite String
sprite_heads :: Lens' Sprite [String]
sprite_urls :: Lens' Sprite [String]
data SidecarFile
SidecarFile :: Double -> String -> String -> String -> String -> Maybe Int -> SidecarFile
[_sidecar_fps] :: SidecarFile -> Double
[_sidecar_label] :: SidecarFile -> String
[_sidecar_type] :: SidecarFile -> String
[_sidecar_head] :: SidecarFile -> String
[_sidecar_url] :: SidecarFile -> String
[_sidecar_item_number] :: SidecarFile -> Maybe Int
sidecar_fps :: Lens' SidecarFile Double
sidecar_label :: Lens' SidecarFile String
sidecar_type :: Lens' SidecarFile String
sidecar_head :: Lens' SidecarFile String
sidecar_url :: Lens' SidecarFile String
sidecar_item_number :: Lens' SidecarFile (Maybe Int)
data FileStuff
FileStuff :: [File] -> [Variation] -> [Sprite] -> [SidecarFile] -> FileStuff
[_files] :: FileStuff -> [File]
[_variations] :: FileStuff -> [Variation]
[_sprites] :: FileStuff -> [Sprite]
[_sidecar_files] :: FileStuff -> [SidecarFile]
files :: Lens' FileStuff [File]
variations :: Lens' FileStuff [Variation]
sprites :: Lens' FileStuff [Sprite]
sidecar_files :: Lens' FileStuff [SidecarFile]
data FileInfo
FileInfo :: FileStuff -> String -> FileInfo
[_fileStuff] :: FileInfo -> FileStuff
[_filename] :: FileInfo -> String
fileStuff :: Lens' FileInfo FileStuff
filename :: Lens' FileInfo String
data Error
Error :: String -> Int -> String -> String -> Error
[_error_reason] :: Error -> String
[_error_code] :: Error -> Int
[_error_description] :: Error -> String
[_error_id] :: Error -> String
error_reason :: Lens' Error String
error_code :: Lens' Error Int
error_description :: Lens' Error String
error_id :: Lens' Error String

-- | A moment of interestingness in a Medium.
data Moment
Moment :: Text -> Maybe Int -> Moment
[_moment_id] :: Moment -> Text
[_moment_time] :: Moment -> Maybe Int
moment_id :: Lens' Moment Text
moment_time :: Lens' Moment (Maybe Int)

-- | Get the moments for the given medium.
moments :: (HasGoProAuth m, MonadIO m) => MediumID -> m [Moment]

-- | Fetch, modify, and store a medium value.
updateMedium :: (HasGoProAuth m, MonadIO m, FromJSON j, Putable a) => (j -> a) -> MediumID -> m ()

-- | Put a Medium. It's probably best to get a raw JSON Value and update it
--   in place.
putMedium :: (HasGoProAuth m, MonadIO m, Putable a) => MediumID -> a -> m ()
instance Data.Aeson.Types.FromJSON.FromJSON GoPro.Plus.Media.Moments
instance Data.Aeson.Types.FromJSON.FromJSON GoPro.Plus.Media.Moment
instance Data.Aeson.Types.ToJSON.ToJSON GoPro.Plus.Media.Moment
instance GHC.Show.Show GoPro.Plus.Media.Errors
instance GHC.Generics.Generic GoPro.Plus.Media.Moment
instance GHC.Classes.Eq GoPro.Plus.Media.Moment
instance GHC.Show.Show GoPro.Plus.Media.Moment
instance Data.Aeson.Types.FromJSON.FromJSON GoPro.Plus.Media.Errors
instance Data.Aeson.Types.FromJSON.FromJSON GoPro.Plus.Media.Error
instance GHC.Show.Show GoPro.Plus.Media.Error
instance GHC.Generics.Generic GoPro.Plus.Media.Error
instance Data.Aeson.Types.FromJSON.FromJSON GoPro.Plus.Media.FileInfo
instance Data.Aeson.Types.ToJSON.ToJSON GoPro.Plus.Media.FileInfo
instance GHC.Show.Show GoPro.Plus.Media.FileInfo
instance GHC.Classes.Eq GoPro.Plus.Media.FileInfo
instance GHC.Generics.Generic GoPro.Plus.Media.FileInfo
instance Data.Aeson.Types.FromJSON.FromJSON GoPro.Plus.Media.FileStuff
instance Data.Aeson.Types.ToJSON.ToJSON GoPro.Plus.Media.FileStuff
instance GHC.Show.Show GoPro.Plus.Media.FileStuff
instance GHC.Classes.Eq GoPro.Plus.Media.FileStuff
instance GHC.Generics.Generic GoPro.Plus.Media.FileStuff
instance GoPro.Plus.Media.HasMediaURL GoPro.Plus.Media.SidecarFile
instance GoPro.Plus.Media.HasMediaHead GoPro.Plus.Media.SidecarFile
instance GoPro.Plus.Media.HasMediaLabel GoPro.Plus.Media.SidecarFile
instance GoPro.Plus.Media.HasMediaType GoPro.Plus.Media.SidecarFile
instance GoPro.Plus.Media.HasMediaItemNumber GoPro.Plus.Media.SidecarFile
instance Data.Aeson.Types.FromJSON.FromJSON GoPro.Plus.Media.SidecarFile
instance Data.Aeson.Types.ToJSON.ToJSON GoPro.Plus.Media.SidecarFile
instance GHC.Show.Show GoPro.Plus.Media.SidecarFile
instance GHC.Classes.Eq GoPro.Plus.Media.SidecarFile
instance GHC.Generics.Generic GoPro.Plus.Media.SidecarFile
instance Data.Aeson.Types.FromJSON.FromJSON GoPro.Plus.Media.Sprite
instance Data.Aeson.Types.ToJSON.ToJSON GoPro.Plus.Media.Sprite
instance GHC.Show.Show GoPro.Plus.Media.Sprite
instance GHC.Classes.Eq GoPro.Plus.Media.Sprite
instance GHC.Generics.Generic GoPro.Plus.Media.Sprite
instance Data.Aeson.Types.FromJSON.FromJSON GoPro.Plus.Media.SpriteFrame
instance Data.Aeson.Types.ToJSON.ToJSON GoPro.Plus.Media.SpriteFrame
instance GHC.Show.Show GoPro.Plus.Media.SpriteFrame
instance GHC.Classes.Eq GoPro.Plus.Media.SpriteFrame
instance GHC.Generics.Generic GoPro.Plus.Media.SpriteFrame
instance GoPro.Plus.Media.HasMediaURL GoPro.Plus.Media.Variation
instance GoPro.Plus.Media.HasMediaHead GoPro.Plus.Media.Variation
instance GoPro.Plus.Media.HasMediaLabel GoPro.Plus.Media.Variation
instance GoPro.Plus.Media.HasMediaType GoPro.Plus.Media.Variation
instance GoPro.Plus.Media.HasMediaItemNumber GoPro.Plus.Media.Variation
instance Data.Aeson.Types.FromJSON.FromJSON GoPro.Plus.Media.Variation
instance Data.Aeson.Types.ToJSON.ToJSON GoPro.Plus.Media.Variation
instance GHC.Show.Show GoPro.Plus.Media.Variation
instance GHC.Classes.Eq GoPro.Plus.Media.Variation
instance GHC.Generics.Generic GoPro.Plus.Media.Variation
instance GoPro.Plus.Media.HasMediaURL GoPro.Plus.Media.File
instance GoPro.Plus.Media.HasMediaHead GoPro.Plus.Media.File
instance GoPro.Plus.Media.HasMediaItemNumber GoPro.Plus.Media.File
instance Data.Aeson.Types.FromJSON.FromJSON GoPro.Plus.Media.File
instance Data.Aeson.Types.ToJSON.ToJSON GoPro.Plus.Media.File
instance GHC.Show.Show GoPro.Plus.Media.File
instance GHC.Classes.Eq GoPro.Plus.Media.File
instance GHC.Generics.Generic GoPro.Plus.Media.File
instance Data.Aeson.Types.FromJSON.FromJSON GoPro.Plus.Media.Listing
instance Data.Aeson.Types.ToJSON.ToJSON GoPro.Plus.Media.Listing
instance GHC.Show.Show GoPro.Plus.Media.Listing
instance GHC.Classes.Eq GoPro.Plus.Media.Listing
instance GHC.Generics.Generic GoPro.Plus.Media.Listing
instance Data.Aeson.Types.ToJSON.ToJSON GoPro.Plus.Media.Medium
instance Data.Aeson.Types.FromJSON.FromJSON GoPro.Plus.Media.Medium
instance GHC.Classes.Eq GoPro.Plus.Media.MediumType
instance GHC.Read.Read GoPro.Plus.Media.MediumType
instance GHC.Show.Show GoPro.Plus.Media.MediumType
instance GHC.Enum.Enum GoPro.Plus.Media.MediumType
instance GHC.Enum.Bounded GoPro.Plus.Media.MediumType
instance GHC.Classes.Eq GoPro.Plus.Media.ReadyToViewType
instance GHC.Generics.Generic GoPro.Plus.Media.ReadyToViewType
instance GHC.Read.Read GoPro.Plus.Media.ReadyToViewType
instance GHC.Show.Show GoPro.Plus.Media.ReadyToViewType
instance GHC.Enum.Enum GoPro.Plus.Media.ReadyToViewType
instance GHC.Enum.Bounded GoPro.Plus.Media.ReadyToViewType
instance GHC.Show.Show GoPro.Plus.Media.Medium
instance GHC.Classes.Eq GoPro.Plus.Media.Medium
instance GHC.Generics.Generic GoPro.Plus.Media.Medium
instance Data.Aeson.Types.ToJSON.ToJSON GoPro.Plus.Media.ReadyToViewType
instance Data.Aeson.Types.FromJSON.FromJSON GoPro.Plus.Media.ReadyToViewType
instance Data.Aeson.Types.ToJSON.ToJSON GoPro.Plus.Media.MediumType
instance Data.Aeson.Types.FromJSON.FromJSON GoPro.Plus.Media.MediumType
instance Data.Aeson.Types.FromJSON.FromJSON GoPro.Plus.Media.PageInfo
instance Data.Aeson.Types.ToJSON.ToJSON GoPro.Plus.Media.PageInfo
instance GHC.Classes.Eq GoPro.Plus.Media.PageInfo
instance GHC.Show.Show GoPro.Plus.Media.PageInfo
instance GHC.Generics.Generic GoPro.Plus.Media.PageInfo


-- | Arbitrary instances for GoPro.Plus
module GoPro.Plus.Arbitrary
aString :: Gen String
aText :: Gen Text
gMaybe :: Gen a -> Gen (Maybe a)
aCamera :: Gen String
genID :: Gen MediumID
instance Test.QuickCheck.Arbitrary.Arbitrary GoPro.Plus.Media.FileInfo
instance Test.QuickCheck.Arbitrary.Arbitrary GoPro.Plus.Media.FileStuff
instance Test.QuickCheck.Arbitrary.Arbitrary GoPro.Plus.Media.Variation
instance Test.QuickCheck.Arbitrary.Arbitrary GoPro.Plus.Media.SpriteFrame
instance Test.QuickCheck.Arbitrary.Arbitrary GoPro.Plus.Media.SidecarFile
instance Test.QuickCheck.Arbitrary.Arbitrary GoPro.Plus.Media.Sprite
instance Test.QuickCheck.Arbitrary.Arbitrary GoPro.Plus.Media.File
instance Test.QuickCheck.Arbitrary.Arbitrary GoPro.Plus.Auth.AuthInfo
instance Test.QuickCheck.Arbitrary.Arbitrary GoPro.Plus.Media.Medium
instance Test.QuickCheck.Arbitrary.Arbitrary GoPro.Plus.Media.Moment
instance Test.QuickCheck.Arbitrary.Arbitrary GoPro.Plus.Media.ReadyToViewType
instance Test.QuickCheck.Arbitrary.Arbitrary GoPro.Plus.Media.MediumType
instance Test.QuickCheck.Arbitrary.Arbitrary GoPro.Plus.Media.PageInfo
instance Test.QuickCheck.Arbitrary.Arbitrary GoPro.Plus.Media.Listing


-- | GoPro Plus media upload client.
module GoPro.Plus.Upload

-- | Convenience action to upload a single medium.
uploadMedium :: (HasGoProAuth m, MonadMask m, MonadIO m, MonadLogger m) => NonEmpty FilePath -> m MediumID

-- | Run an Uploader monad to create a single medium and upload the content
--   for it.
runUpload :: (HasGoProAuth m, MonadIO m) => NonEmpty FilePath -> Uploader m a -> m a

-- | Run an Uploader monad for which we already know the MediumID (i.e.,
--   we're resuming an upload we previously began).
resumeUpload :: (HasGoProAuth m, MonadIO m) => NonEmpty FilePath -> MediumID -> Uploader m a -> m a

-- | Create a new medium (e.g., video, photo, etc...) and return its ID.
createMedium :: (HasGoProAuth m, MonadIO m) => Uploader m MediumID

-- | Convenient action for creating a Source derivative.
createSource :: (HasGoProAuth m, MonadIO m) => Int -> Uploader m DerivativeID

-- | Create a new derivative of the current medium containing the given
--   number of parts.
createDerivative :: (HasGoProAuth m, MonadIO m) => Int -> Text -> Text -> Uploader m DerivativeID

-- | Create a new upload for a derivative.
createUpload :: (HasGoProAuth m, MonadIO m) => DerivativeID -> Int -> Int -> Uploader m Upload

-- | Mark the given upload for the given derivative as complete.
completeUpload :: (HasGoProAuth m, MonadIO m) => UploadID -> DerivativeID -> Int -> Integer -> Uploader m ()

-- | Retreive an Upload with the given upload and derivative ID.
getUpload :: (HasGoProAuth m, MonadIO m) => UploadID -> DerivativeID -> Int -> Int -> Uploader m Upload

-- | Upload a chunk of of the given file as specified by this UploadPart.
uploadChunk :: (MonadMask m, MonadIO m, MonadLogger m) => FilePath -> UploadPart -> Uploader m ()

-- | Mark the given derivative as availble to use. This also updates the
--   medium record marking it as having completed its upload.
markAvailable :: (HasGoProAuth m, MonadIO m) => DerivativeID -> Uploader m ()
type UploadID = Text
type DerivativeID = Text
data UploadPart
UploadPart :: Integer -> Integer -> String -> UploadPart
[_uploadLength] :: UploadPart -> Integer
[_uploadPart] :: UploadPart -> Integer
[_uploadURL] :: UploadPart -> String
uploadLength :: Lens' UploadPart Integer
uploadPart :: Lens' UploadPart Integer
uploadURL :: Lens' UploadPart String
data Upload
Upload :: UploadID -> [UploadPart] -> Upload
[_uploadID] :: Upload -> UploadID
[_uploadParts] :: Upload -> [UploadPart]
uploadID :: Lens' Upload UploadID
uploadParts :: Lens' Upload [UploadPart]

-- | GoPro Plus uploader monad.
type Uploader = StateT Env

-- | Override the detected medium type.
setMediumType :: Monad m => MediumType -> Uploader m ()

-- | Set the individual chunk size for uploading parts of media.
setChunkSize :: (Monad m, MonadMask m) => Integer -> Uploader m ()

-- | List all media in uploading state.
listUploading :: (HasGoProAuth m, MonadIO m) => m [Medium]
instance GHC.Show.Show GoPro.Plus.Upload.Upload
instance GHC.Show.Show GoPro.Plus.Upload.UploadPart
instance GoPro.Plus.Auth.HasGoProAuth m => GoPro.Plus.Auth.HasGoProAuth (GoPro.Plus.Upload.Uploader m)
instance Control.Monad.IO.Unlift.MonadUnliftIO m => Control.Monad.IO.Unlift.MonadUnliftIO (Control.Monad.Trans.State.Lazy.StateT GoPro.Plus.Upload.Env m)
